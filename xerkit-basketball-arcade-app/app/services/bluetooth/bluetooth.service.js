"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
var Subject_1 = require("rxjs/Subject");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
require("rxjs/add/operator/distinctUntilChanged");
var bluetooth = require("nativescript-bluetooth");
var BluetoothService = (function () {
    function BluetoothService() {
        var _this = this;
        this.DEFAULT_SERVICE_UUID = "FFE0";
        this.DEFAULT_CHARACTERISTIC_UUID = "FFE1";
        this.isBluetoothEnabledSource = new Subject_1.Subject();
        this.isBluetoothEnabled$ = this.isBluetoothEnabledSource.asObservable();
        this.isBluetoothEnabledObject = null;
        this.bleDeviceChosenSource = new Subject_1.Subject();
        this.bleDeviceChosen$ = this.bleDeviceChosenSource.asObservable();
        this.bleDeviceChosenObject = null;
        this.bleDevicesFoundSource = new Subject_1.Subject();
        this.bleDevicesFound$ = this.bleDevicesFoundSource.asObservable();
        this.bleDevicesFoundObject = [];
        this.isBleDeviceConnectedSource = new Subject_1.Subject();
        this.isBleDeviceConnected$ = this.isBleDeviceConnectedSource.asObservable();
        this.isBleDeviceConnectedObject = false;
        var self = this;
        this.getCentralDevicePermission().then(function (granted) {
            _this.listenToBluetoothEnabled().subscribe(function (isBluetoothEnabled) {
                self.setIsBluetoothEnabled(isBluetoothEnabled);
            });
        });
    }
    BluetoothService.prototype.reset = function () {
        this.setIsBluetoothEnabled(false);
        this.setbleDeviceChosen(null);
        this.setBleDevicesFound([]);
        this.setbleDeviceConnected(false);
    };
    BluetoothService.prototype.setIsBluetoothEnabled = function (bluetoothEnabled) {
        this.isBluetoothEnabledObject = bluetoothEnabled;
        this.isBluetoothEnabledSource.next(bluetoothEnabled);
    };
    BluetoothService.prototype.setbleDeviceChosen = function (device) {
        this.bleDeviceChosenObject = device;
        this.bleDeviceChosenSource.next(device);
    };
    BluetoothService.prototype.setBleDevicesFound = function (devices) {
        this.bleDevicesFoundObject = devices;
        this.bleDevicesFoundSource.next(devices);
    };
    BluetoothService.prototype.setbleDeviceConnected = function (connected) {
        this.isBleDeviceConnectedObject = connected;
        this.isBleDeviceConnectedSource.next(connected);
    };
    BluetoothService.prototype.listenToBluetoothEnabled = function () {
        return new Observable_1.Observable(function (observer) {
            bluetooth.isBluetoothEnabled().then(function (enabled) { return observer.next(enabled); });
            var intervalHandle = setInterval(function () {
                bluetooth.isBluetoothEnabled()
                    .then(function (enabled) { return observer.next(enabled); });
            }, 1000);
            // stop checking every second on unsubscribe
            return function () { return clearInterval(intervalHandle); };
        });
    };
    BluetoothService.prototype.scanForBleDevices = function () {
        var self = this;
        this.setBleDevicesFound([]); // Reset BLE Devices Found
        bluetooth.startScanning({
            seconds: 4,
            onDiscovered: function (peripheral) {
                console.log("Periperhal Found - UUID: " + peripheral.UUID + ", NAME: " + peripheral.name);
                self.bleDevicesFoundObject.push(peripheral);
            }
        }).then(function () {
            self.setBleDevicesFound(self.bleDevicesFoundObject);
            console.log("scanning complete");
        }, function (err) {
            console.log("error while scanning: " + err);
        });
    };
    BluetoothService.prototype.sendMessageToBleDevice = function (message) {
        var self = this;
        if (this.bleDeviceChosenObject) {
            bluetooth.writeWithoutResponse({
                peripheralUUID: self.bleDeviceChosenObject.UUID,
                serviceUUID: self.DEFAULT_SERVICE_UUID,
                characteristicUUID: self.DEFAULT_CHARACTERISTIC_UUID,
                value: self.stringToBluetoothHexString(message) // a hex
            }).then(function (result) {
                console.log("value written", result);
            }, function (err) {
                console.log("write error: " + err);
            });
        }
        else {
            throw new Error("BLE Device not connected!");
        }
    };
    BluetoothService.prototype.connectToBleDevice = function (bleDevice) {
        var self = this;
        bluetooth.connect({
            UUID: bleDevice.UUID,
            onConnected: function (peripheral) {
                self.setbleDeviceConnected(true);
                console.log("PERIPHERAL CONNECTED!", peripheral);
                // the peripheral object now has a list of available services:
                peripheral.services.forEach(function (service) {
                    console.log("Service found: ", service);
                });
                self.startBluetoothNotifyReader();
            },
            onDisconnected: function (peripheral) {
                self.reset();
                console.log("Periperhal disconnected with UUID: " + peripheral.UUID);
            }
        });
    };
    BluetoothService.prototype.startBluetoothNotifyReader = function () {
        var self = this;
        bluetooth.startNotifying({
            peripheralUUID: self.bleDeviceChosenObject.UUID,
            serviceUUID: self.DEFAULT_SERVICE_UUID,
            characteristicUUID: self.DEFAULT_CHARACTERISTIC_UUID,
            onNotify: function (result) {
                if (result) {
                    // Handle Result here to dispatcher
                    console.log("VALUE READ", self.bluetoothHexStringToString(result.valueRaw.toString()));
                }
            }
        }).then(function () {
            console.log("Subscribed for Bluetooth Notifications");
        });
    };
    BluetoothService.prototype.stringToBluetoothHexString = function (str) {
        var bluetoothHexString = "";
        for (var i = 0; i < str.length; i++) {
            bluetoothHexString += "0x" + str.charCodeAt(i).toString(16);
            if (i < (str.length - 1)) {
                bluetoothHexString += ",";
            }
        }
        console.log("BLUETOOTH HEX STRING: ", bluetoothHexString);
        return bluetoothHexString;
    };
    BluetoothService.prototype.bluetoothHexStringToString = function (hexString) {
        // FORMAT: <68656c6c 6f77>
        // Should strip spaces and s    trip gt and lt
        hexString = hexString.replace(/\W/g, '');
        var hex = hexString;
        var hexString = '';
        var hexChar = '';
        var substring = '';
        for (var n = 0; n < hex.length; n += 2) {
            substring = hex.substr(n, 2);
            hexChar = String.fromCharCode(parseInt(substring, 16));
            hexString += hexChar;
        }
        return hexString;
    };
    // write(bluetoothMessage): void {
    //     console.log('Writing message: ' + JSON.stringify(bluetoothMessage));
    //     bluetooth.write(bluetoothMessage)
    //         .then((result) => console.log("Value written " + JSON.stringify(result)),
    //         (error) => console.log("Write error: " + error));
    // }
    BluetoothService.prototype.getCentralDevicePermission = function () {
        return bluetooth.hasCoarseLocationPermission()
            .then(function (granted) {
            console.log("Has location permission ? " + granted);
            if (!granted) {
                bluetooth.requestCoarseLocationPermission().then(function () { return console.log("Location permission requested"); });
            }
            return granted;
        });
    };
    BluetoothService.prototype.sendSetEngineIgnitionStatusOn = function () {
        this.sendMessageToBleDevice("password|C1");
    };
    BluetoothService.prototype.sendSetEngineIgnitionStatusOff = function () {
        this.sendMessageToBleDevice("password|C0");
    };
    BluetoothService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], BluetoothService);
    return BluetoothService;
}());
exports.BluetoothService = BluetoothService;
//# sourceMappingURL=data:application/json;base64,